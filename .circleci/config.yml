version: 2.1

jobs:
  run_client:
    resource_class: small
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run: pip install -r client/requirements.txt
      - run: python client/main.py

  check_client:
    resource_class: small
    docker:
      - image: cimg/python:3.9-node
    steps:
      - checkout
      - run: echo 'export SHORT_REV=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
      - run: sudo npm install -g apollo
      - run: cd client/ && apollo client:check --clientName=iOS --clientVersion=$SHORT_REV --includes="*.py" --variant=$APOLLO_GRAPH_VARIANT

  check_books_schema:
    resource_class: small
    docker:
      - image: cimg/node:15.5
    steps:
      - checkout
      - run: sudo npm install -g apollo
      - run: cd books && npm install
      # Start the GraphQL server. If a different command is used to
      # start the server, use it in place of `npm start` here.
      - run:
          name: Starting server
          command: cd books && node server.js
          background: true

      # Make sure the server has enough time to start up before running
      # commands against it.
      - run: sleep 5

      # This command authenticates using the `APOLLO_KEY` environment
      # variable. Specify your GraphQL endpoint's URL in your Apollo config.
      - run: apollo service:check --endpoint=http://localhost:8080 --graph=jesse-test-1xc6kq --variant=current --serviceName=books

  check_authors_schema:
    resource_class: small
    docker:
      - image: cimg/go:1.15-node
    steps:
      - checkout
      - run: sudo npm install -g apollo
      - run: cd authors && go build
      # Start the GraphQL server. If a different command is used to
      # start the server, use it in place of `npm start` here.
      - run:
          name: Starting server
          command: cd authors && ./authors
          background: true

      # Make sure the server has enough time to start up before running
      # commands against it.
      - run: sleep 5

      # This command authenticates using the `APOLLO_KEY` environment
      # variable. Specify your GraphQL endpoint's URL in your Apollo config.
      - run: apollo service:check --endpoint=http://localhost:8080 --graph=jesse-test-1xc6kq --variant=current --serviceName=authors


workflows:
  version: 2
  general:
    jobs:
      - check_client:
          context: ApolloCloud
      - check_books_schema:
          context: ApolloCloud
      - check_authors_schema:
          context: ApolloCloud
  workweek:
    triggers:
      - schedule:
          cron: "0,10,20,30,40,50 11-18 * * 1-5"
          filters:
            branches:
              only: master
    jobs:
      - run_client